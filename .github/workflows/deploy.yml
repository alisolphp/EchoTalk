name: CI/CD - Test, Build & Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Run tests and generate coverage report
        run: npx vitest run --coverage

      - name: Update Coverage in README
        run: |
          set -euo pipefail

          if [ ! -f coverage/coverage-summary.json ]; then
            echo "coverage/coverage-summary.json not found"
            exit 1
          fi

          node <<'NODE'
          const fs = require('fs');

          // --- Build badge
          const cov = JSON.parse(fs.readFileSync('coverage/coverage-summary.json','utf8'));
          const pct = Number(cov.total?.statements?.pct ?? 0);
          const pctStr = pct.toFixed(2);
          const pctInt = Math.floor(pct);
          const color = pctInt < 50 ? 'red' : (pctInt < 80 ? 'yellow' : 'green');
          const badge = `![Coverage](https://img.shields.io/badge/coverage-${encodeURIComponent(pctStr)}%25-${color})`;

          // --- Build table
          const rows = [];
          rows.push('| File | % Stmts | % Branch | % Funcs | % Lines |');
          rows.push('| ---- | ------- | -------- | ------- | ------- |');
          const entries = Object.entries(cov).filter(([k]) => k !== 'total');
          for (const [file, v] of entries) {
            const nice = file.replace(/^.*\/src\//, 'src/');
            rows.push(`| ${nice} | ${v.statements.pct} | ${v.branches.pct} | ${v.functions.pct} | ${v.lines.pct} |`);
          }
          rows.push(`| All files | ${cov.total.statements.pct} | ${cov.total.branches.pct} | ${cov.total.functions.pct} | ${cov.total.lines.pct} |`);
          const table = rows.join('\n');

          let readme = fs.readFileSync('README.md','utf8');

          // A) migrate legacy block to LINE
          const legacyRe = /(<!--\s*COVERAGE_BADGE_START\s*-->)[\s\S]*?(<!--\s*COVERAGE_BADGE_END\s*-->)/;
          if (legacyRe.test(readme)) {
            readme = readme.replace(legacyRe, `${badge} <!-- COVERAGE_BADGE_LINE -->`);
          }

          // B) write badge at the beginning of the line containing LINE marker
          const lineRe = /^[^\n]*<!--\s*COVERAGE_BADGE_LINE\s*-->[^\n]*$/m;
          if (lineRe.test(readme)) {
            readme = readme.replace(lineRe, `${badge} <!-- COVERAGE_BADGE_LINE -->`);
          } else {
            // No marker? insert after first H1 or at file start
            if (/^# .*\n?/.test(readme)) {
              readme = readme.replace(/^# .*\n?/, m => `${m}${badge} <!-- COVERAGE_BADGE_LINE -->\n`);
            } else {
              readme = `${badge} <!-- COVERAGE_BADGE_LINE -->\n\n${readme}`;
            }
          }

          // C) table block
          const tableRe = /(<!--\s*COVERAGE_TABLE_START\s*-->)[\s\S]*?(<!--\s*COVERAGE_TABLE_END\s*-->)/;
          if (tableRe.test(readme)) {
            readme = readme.replace(tableRe, `$1\n${table}\n$2`);
          } else {
            readme += `\n\n### Coverage Summary\n<!-- COVERAGE_TABLE_START -->\n${table}\n<!-- COVERAGE_TABLE_END -->\n`;
          }

          fs.writeFileSync('README.md', readme, 'utf8');
          NODE

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "Docs: update badge & table via CI [skip ci]"
            git push
          else
            echo "No changes in coverage to commit."
          fi

      - name: Build project
        run: npm run build

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          force_orphan: true

      - name: Zip dist folder
        run: |
          command -v zip >/dev/null 2>&1 || sudo apt-get update && sudo apt-get install -y zip
          zip -r dist.zip ./dist

      - name: Deploy to shared hosting
        run: |
          curl -X POST \
            -F "file=@dist.zip" \
            -F "token=${{ secrets.DEPLOYER_TOKEN }}" \
            "${{ secrets.DEPLOYER_URL }}"